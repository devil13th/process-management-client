[{"D:\\devil13th\\github\\process-management-client\\src\\index.js":"1","D:\\devil13th\\github\\process-management-client\\src\\App.js":"2","D:\\devil13th\\github\\process-management-client\\src\\reportWebVitals.js":"3","D:\\devil13th\\github\\process-management-client\\src\\layout\\IndexLayout.jsx":"4","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\ProcessInstanceList.jsx":"5","D:\\devil13th\\github\\process-management-client\\src\\api\\ProcessApi.js":"6","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskList.jsx":"7","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskHisList.jsx":"8","D:\\devil13th\\github\\process-management-client\\src\\components\\processdefined\\ProcessDefinedList.jsx":"9","D:\\devil13th\\github\\process-management-client\\src\\axios.js":"10","D:\\devil13th\\github\\process-management-client\\src\\components\\processvariable\\ProcessVariable.jsx":"11","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskInfo.jsx":"12"},{"size":532,"mtime":1615261135256,"results":"13","hashOfConfig":"14"},{"size":284,"mtime":1612864120402,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611828054570,"results":"16","hashOfConfig":"14"},{"size":3057,"mtime":1615772816786,"results":"17","hashOfConfig":"14"},{"size":8678,"mtime":1615765065722,"results":"18","hashOfConfig":"14"},{"size":3368,"mtime":1615774156293,"results":"19","hashOfConfig":"14"},{"size":10509,"mtime":1615774767542,"results":"20","hashOfConfig":"14"},{"size":7084,"mtime":1615776355090,"results":"21","hashOfConfig":"14"},{"size":9220,"mtime":1615772365566,"results":"22","hashOfConfig":"14"},{"size":428,"mtime":1615261282157,"results":"23","hashOfConfig":"14"},{"size":7041,"mtime":1615774477814,"results":"24","hashOfConfig":"14"},{"size":3509,"mtime":1615778341750,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"iw0ona",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\devil13th\\github\\process-management-client\\src\\index.js",[],["54","55"],"D:\\devil13th\\github\\process-management-client\\src\\App.js",["56","57"],"import logo from './logo.svg';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport IndexLayout from '@/layout/IndexLayout'\nfunction App() {\n  return (\n    <BrowserRouter>\n    <IndexLayout></IndexLayout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","D:\\devil13th\\github\\process-management-client\\src\\reportWebVitals.js",[],"D:\\devil13th\\github\\process-management-client\\src\\layout\\IndexLayout.jsx",["58","59","60","61","62"],"D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\ProcessInstanceList.jsx",["63","64","65","66","67","68","69"],"import React from \"react\";\r\nimport { Tabs, Input, Table, Tooltip, Divider, Modal, Button,Popconfirm ,message} from \"antd\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  DeleteOutlined,\r\n  UnorderedListOutlined,\r\n  SettingOutlined,\r\n  OrderedListOutlined\r\n} from \"@ant-design/icons\";\r\nimport TaskList from \"./TaskList\";\r\nimport TaskHisList from \"./TaskHisList\";\r\nimport ProcessVariable from '../processvariable/ProcessVariable'\r\nimport ProcessApi from \"@/api/ProcessApi\";\r\n\r\nconst { Search } = Input;\r\nconst { TabPane } = Tabs;\r\nclass ProcessInstanceList extends React.Component {\r\n  state = {\r\n    tableData: [],\r\n    tableLoading: false,\r\n    keyWords: \"\",\r\n    processInstanceId: \"\",\r\n    taskListModalVisible: false,\r\n    taskHisListModalVisible:false,\r\n    processVarModalVisible:false,\r\n    executionVar:'',\r\n    executionLocalVar:'',\r\n    pagination: {\r\n      current: 1,\r\n      pageSize: 10,\r\n      pageSizeOptions: [5, 10, 15, 50, 100],\r\n      showTotal: (total, range) => {\r\n        return `${total} items`;\r\n      },\r\n      showSizeChanger: true,\r\n      showQuickJumper: true,\r\n    },\r\n    // 排序\r\n    sorter: {\r\n      field: \"procinst.start_time_\",\r\n      order: \"descend\",\r\n    },\r\n  };\r\n\r\n  onSearch = (v) => {\r\n    this.setState(\r\n      {\r\n        keyWords: v,\r\n      },\r\n      () => {\r\n        this.queryList(true);\r\n      }\r\n    );\r\n  };\r\n\r\n  queryList = (clearPage) => {\r\n    console.log(\"===\", this.state.pagination);\r\n    if (clearPage) {\r\n      // 清除分页\r\n      this.setState(\r\n        {\r\n          pagination: {\r\n            showTotal: (total, range) => {\r\n              return `${total} items`;\r\n            },\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            ...this.state.pagination,\r\n            current: 1,\r\n          },\r\n        },\r\n        this.basicQuery\r\n      );\r\n    } else {\r\n      this.basicQuery();\r\n    }\r\n  };\r\n\r\n  // 基础查询\r\n  basicQuery = () => {\r\n    const _this = this;\r\n    const queryCondition = {\r\n      current: this.state.pagination.current,\r\n      pageSize: this.state.pagination.pageSize,\r\n      total: this.state.pagination.total,\r\n      sortField: this.state.sorter.field,\r\n      sortOrder: this.state.sorter.order.replace(\"end\", \"\"),\r\n      keyWords: this.state.keyWords,\r\n    };\r\n    this.setState({ tableLoading: true });\r\n    ProcessApi.queryProcessInstancePage(queryCondition).then((result) => {\r\n      const r = result.data;\r\n      this.setState({\r\n        tableData: r.list,\r\n        tableLoading: false,\r\n        pagination: {\r\n          showTotal: (total, range) => {\r\n            return `${total} items`;\r\n          },\r\n          showSizeChanger: true,\r\n          showQuickJumper: true,\r\n          current: r.pageNum,\r\n          pageSize: r.pageSize,\r\n          total: r.total,\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  // 分页/排序 事件处理\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    const st = {\r\n      pagination: {\r\n        showTotal: (total, range) => {\r\n          return `${total} items`;\r\n        },\r\n        showSizeChanger: true,\r\n        showQuickJumper: true,\r\n        current: pagination.current,\r\n        pageSize: pagination.pageSize,\r\n        total: this.state.pagination.total,\r\n      },\r\n    };\r\n    if (sorter.field && sorter.order) {\r\n      st.sorter = {\r\n        field: sorter.field,\r\n        order: sorter.order,\r\n      };\r\n    } else {\r\n      st.sorter = {\r\n        field: \"\",\r\n        order: \"\",\r\n      };\r\n    }\r\n    this.setState(st, this.queryList);\r\n  };\r\n  openTaskListModal = (processInstanceId) => {\r\n    this.setState({\r\n      processInstanceId: processInstanceId,\r\n      taskListModalVisible: true,\r\n    });\r\n  };\r\n  openTaskHisListModal = (processInstanceId) => {\r\n    this.setState({\r\n      processInstanceId: processInstanceId,\r\n      taskHisListModalVisible: true,\r\n    });\r\n  };\r\n  closeModal = () => {\r\n    this.setState({\r\n      taskListModalVisible: false,\r\n      taskHisListModalVisible:false,\r\n      processVarModalVisible:false,\r\n    });\r\n  };\r\n\r\n  openProcessVar(executionId){\r\n\r\n    this.setState({processVarModalVisible:true,processInstanceId:executionId})\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.queryList();\r\n  }\r\n\r\n  deleteProcessInstance = (record) =>{\r\n    ProcessApi.deleteProcessInstance(record.processInstanceId).then( r => {\r\n      if(r.data === 'SUCCESS'){\r\n        message.success(\"Process Instance Be Deleted successfully\")\r\n        this.queryList(false)\r\n      }else{\r\n        message.error(\"Process Instance Deleted Failure\")\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const columns = [\r\n      {\r\n        title: \"Def ID\",\r\n        dataIndex: \"procDefId\",\r\n      },\r\n      {\r\n        title: \"Key\",\r\n        dataIndex: \"businessKey\",\r\n      },\r\n      {\r\n        title: \"PI Id\",\r\n        dataIndex: \"processInstanceId\",\r\n      },\r\n      {\r\n        title: \"Start\",\r\n        dataIndex: \"processInstanceStartTime\",\r\n      },\r\n      {\r\n        title: \"End\",\r\n        dataIndex: \"processInstanceEndTime\",\r\n      },\r\n      {\r\n        title: \"Operate\",\r\n        key: \"operate\",\r\n        render: (text, record) => (\r\n          <div>\r\n            <Tooltip title=\"Curent Task\">\r\n              <a>\r\n                <UnorderedListOutlined\r\n                  onClick={() => {\r\n                    this.openTaskListModal(record.processInstanceId);\r\n                  }}\r\n                />\r\n              </a>\r\n            </Tooltip>\r\n            <Divider type=\"vertical\"></Divider>\r\n            <Tooltip title=\"Step History\">\r\n              <a>\r\n                <OrderedListOutlined\r\n                  onClick={() => {\r\n                    this.openTaskHisListModal(record.processInstanceId);\r\n                  }}\r\n                />\r\n              </a>\r\n            </Tooltip>\r\n            \r\n            <Divider type=\"vertical\"></Divider>\r\n\r\n\r\n            <Popconfirm\r\n              placement=\"left\"\r\n              title=\"Are you sure to delete this process instance?\"\r\n              onConfirm={() => {\r\n                this.deleteProcessInstance(record);\r\n              }}\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n            >\r\n              <Tooltip title=\"Delete Process Instance\">\r\n              <a>\r\n                <DeleteOutlined />\r\n              </a>\r\n            </Tooltip>\r\n            </Popconfirm>\r\n\r\n\r\n\r\n            \r\n            <Divider type=\"vertical\"></Divider>\r\n            <Tooltip title=\"Set Process Global Variable\">\r\n              <a>\r\n                <SettingOutlined onClick={() => {this.openProcessVar(record.processInstanceId)}}/>\r\n              </a>\r\n            </Tooltip>\r\n            \r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const operations = {\r\n      right: (\r\n        <Search\r\n          placeholder=\"key words\"\r\n          onSearch={this.onSearch}\r\n          style={{ width: 200 }}\r\n          size=\"small\"\r\n          enterButton\r\n        />\r\n      ),\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Tabs type=\"card\" tabBarExtraContent={operations}>\r\n          <TabPane tab=\"Process Instance Management\" ></TabPane>\r\n        </Tabs>\r\n\r\n        <Table\r\n          onChange={this.handleTableChange}\r\n          columns={columns}\r\n          dataSource={this.state.tableData}\r\n          pagination={this.state.pagination}\r\n          size=\"small\"\r\n          rowKey=\"processInstanceId\"\r\n        />\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          style={{top:32}}\r\n          title={<UnorderedListOutlined />}\r\n          visible={this.state.taskListModalVisible}\r\n          onOk={this.closeModal}\r\n          onCancel={this.closeModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <TaskList processInstanceId={this.state.processInstanceId}></TaskList>\r\n        </Modal>\r\n\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          style={{top:32}}\r\n          title={<OrderedListOutlined/>}\r\n          visible={this.state.taskHisListModalVisible}\r\n          onOk={this.closeModal}\r\n          onCancel={this.closeModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <TaskHisList processInstanceId={this.state.processInstanceId}></TaskHisList>\r\n        </Modal>\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          title={<OrderedListOutlined/>}\r\n          visible={this.state.processVarModalVisible}\r\n          onOk={this.closeModal}\r\n          onCancel={this.closeModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <ProcessVariable processVarType='execution' id={this.state.processInstanceId}></ProcessVariable>\r\n        </Modal>\r\n\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProcessInstanceList;\r\n","D:\\devil13th\\github\\process-management-client\\src\\api\\ProcessApi.js",["70"],"D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskList.jsx",["71","72","73","74","75","76","77"],"D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskHisList.jsx",["78","79","80","81","82","83","84"],"D:\\devil13th\\github\\process-management-client\\src\\components\\processdefined\\ProcessDefinedList.jsx",["85","86","87","88","89","90","91","92"],"D:\\devil13th\\github\\process-management-client\\src\\axios.js",[],"D:\\devil13th\\github\\process-management-client\\src\\components\\processvariable\\ProcessVariable.jsx",["93","94"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ProcessApi from \"@/api/ProcessApi\";\r\nimport {Divider,Alert,Input, InputNumber, Select, Radio, Row, Col, Button, message } from \"antd\";\r\nimport {EditOutlined } from \"@ant-design/icons\";\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nclass ProcessVariable extends React.Component {\r\n  state = {\r\n    executionVar: \"\",\r\n    executionLocalVar: \"\",\r\n    taskVar:\"\",\r\n    taskLocalVar:\"\",\r\n    tid: \"\",\r\n    idType: \"\",\r\n    processVarStr:\"{}\"\r\n  };\r\n\r\n  static propTypes = {\r\n    processVarType: PropTypes.string,\r\n    id: PropTypes.string,\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n    if (this.props.id) {\r\n      this.setState(\r\n        {\r\n          tid: this.props.id,\r\n          idType: this.props.processVarType,\r\n        },\r\n        this.search\r\n      );\r\n    }\r\n   \r\n  }\r\n\r\n  search = () => {\r\n    // alert(this.state.idType + \"|\" + v)\r\n\r\n    if(this.state.idType === 'execution'){\r\n        ProcessApi.queryProcessVarByExecutionId(this.state.tid).then((r) => {\r\n            console.log(r);\r\n            this.setState({\r\n                executionVar: JSON.stringify(r.data),\r\n            });\r\n        });\r\n\r\n        ProcessApi.queryProcessVarLocalByExecutionId(this.state.tid).then((r) => {\r\n            console.log(r);\r\n            this.setState({\r\n                executionLocalVar: JSON.stringify(r.data),\r\n            });\r\n        });\r\n    }else{\r\n        ProcessApi.queryProcessVarByTaskId(this.state.tid).then((r) => {\r\n            console.log(r);\r\n            this.setState({\r\n                taskVar: JSON.stringify(r.data),\r\n            });\r\n        });\r\n\r\n        ProcessApi.queryProcessVarLocalByTaskId(this.state.tid).then((r) => {\r\n            console.log(r);\r\n            this.setState({\r\n                taskLocalVar: JSON.stringify(r.data),\r\n            });\r\n        });\r\n\r\n    }\r\n  };\r\n\r\n  vmodel = (name, v) => {\r\n    this.setState({ [name]: v });\r\n  }\r\n\r\n\r\n  setVarGlobal = () => {\r\n    let processVar = {}\r\n    try{\r\n        processVar = JSON.parse(this.state.processVarStr);\r\n    }catch(e){\r\n        message.error(\" JSON parse err!\");\r\n        return\r\n    }\r\n\r\n    if(this.state.idType === \"execution\"){\r\n        ProcessApi.setProcessVarGlobalByExecutionId({\r\n            executionId:this.state.tid,\r\n            processVariable:processVar\r\n        }).then( r =>{\r\n            this.search();\r\n        })\r\n    }else{\r\n        ProcessApi.setProcessVarGlobalByTaskId({\r\n            executionId:this.state.tid,\r\n            processVariable:processVar\r\n        }).then( r =>{\r\n            this.search();\r\n        })\r\n    }\r\n\r\n\r\n  }\r\n  setVarLocal = () => {\r\n    let processVar = {}\r\n    try{\r\n        processVar = JSON.parse(this.state.processVarStr);\r\n    }catch(e){\r\n        message.error(\" JSON parse err!\");\r\n        return\r\n    }\r\n\r\n    if(this.state.idType === \"execution\"){\r\n        ProcessApi.setProcessVarLocalByExecutionId({\r\n            executionId:this.state.tid,\r\n            processVariable:processVar\r\n        }).then( r =>{\r\n            this.search();\r\n        })\r\n    }else{\r\n        ProcessApi.setProcessVarLocalByTaskId({\r\n            executionId:this.state.tid,\r\n            processVariable:processVar\r\n        }).then( r =>{\r\n            this.search();\r\n        })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ textAlign: \"right\" }}>\r\n          <Input.Group compact>\r\n            <Select\r\n              style={{ width: 130 }}\r\n              defaultValue=\"execution\"\r\n              value={this.state.idType}\r\n              onChange={(v) => {\r\n                this.setState({ idType: v });\r\n              }}\r\n            >\r\n              <Option value=\"execution\">Execution ID</Option>\r\n              <Option value=\"task\">Task ID</Option>\r\n            </Select>\r\n\r\n            <Input.Search\r\n              enterButton\r\n              style={{ width: 200 }}\r\n              onChange={(e) => {\r\n                this.setState({ tid: e.target.value });\r\n              }}\r\n              value={this.state.tid}\r\n              onSearch={this.search}\r\n            />\r\n          </Input.Group>\r\n        </div>\r\n        <Divider />\r\n        {/* {JSON.stringify(this.props)}|{JSON.stringify(this.state)} */}\r\n        <Row>\r\n          <Col\r\n            span={4}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n            <EditOutlined /> Set Process Variable:\r\n          </Col>\r\n          <Col span={10}>\r\n            <TextArea\r\n              value={this.state.processVarStr}\r\n              onChange={(e) => {\r\n                this.vmodel(\"processVarStr\", e.target.value);\r\n              }}\r\n            ></TextArea>\r\n\r\n            <div\r\n              dangerouslySetInnerHTML={{\r\n                __html: `Eg.<br/>{<br/>\"users\":[\"zhangsan\",\"lisi\",\"wangwu\"],<br/>\"judge\":\"”zhaoliu\"<br/>}`,\r\n              }}\r\n            ></div>\r\n          </Col>\r\n          <Col span={9} offset={1}>\r\n            <Button onClick={this.setVarGlobal}> Set Variable Global</Button>\r\n            <Divider type=\"vertical\" />\r\n            <Button onClick={this.setVarLocal}> Set Variable Local</Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Divider />\r\n        <Row>\r\n          <Col\r\n            span={10}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n             Execution Gloab Variable :\r\n          </Col>\r\n          <Col span={14}>\r\n            <Alert\r\n              message={this.state.executionVar ? this.state.executionVar : \"{}\"}\r\n              type=\"warning\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <Row>\r\n          <Col\r\n            span={10}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n             Execution Local Variable :\r\n          </Col>\r\n          <Col span={14}>\r\n            <Alert\r\n              message={\r\n                this.state.executionLocalVar\r\n                  ? this.state.executionLocalVar\r\n                  : \"{}\"\r\n              }\r\n              type=\"warning\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <Row>\r\n          <Col\r\n            span={10}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n             Task Gloab Variable :\r\n          </Col>\r\n          <Col span={14}>\r\n            <Alert\r\n              message={this.state.taskVar ? this.state.taskVar : \"{}\"}\r\n              type=\"info\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <Row>\r\n          <Col\r\n            span={10}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n             Task Local Variable :\r\n          </Col>\r\n          <Col span={14}>\r\n            <Alert\r\n              message={this.state.taskLocalVar ? this.state.taskLocalVar : \"{}\"}\r\n              type=\"info\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProcessVariable;\r\n","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskInfo.jsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":12},{"ruleId":"99","severity":1,"message":"103","line":2,"column":25,"nodeType":"101","messageId":"102","endLine":2,"endColumn":30},{"ruleId":"99","severity":1,"message":"104","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":23},{"ruleId":"99","severity":1,"message":"105","line":3,"column":24,"nodeType":"101","messageId":"102","endLine":3,"endColumn":34},{"ruleId":"99","severity":1,"message":"106","line":5,"column":3,"nodeType":"101","messageId":"102","endLine":5,"endColumn":18},{"ruleId":"99","severity":1,"message":"107","line":6,"column":3,"nodeType":"101","messageId":"102","endLine":6,"endColumn":19},{"ruleId":"99","severity":1,"message":"108","line":16,"column":9,"nodeType":"101","messageId":"102","endLine":16,"endColumn":15},{"ruleId":"99","severity":1,"message":"109","line":2,"column":55,"nodeType":"101","messageId":"102","endLine":2,"endColumn":61},{"ruleId":"99","severity":1,"message":"110","line":4,"column":3,"nodeType":"101","messageId":"102","endLine":4,"endColumn":21},{"ruleId":"99","severity":1,"message":"111","line":81,"column":11,"nodeType":"101","messageId":"102","endLine":81,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":205,"column":15,"nodeType":"114","endLine":205,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":215,"column":15,"nodeType":"114","endLine":215,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":237,"column":15,"nodeType":"114","endLine":237,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":248,"column":15,"nodeType":"114","endLine":248,"endColumn":18},{"ruleId":"115","severity":1,"message":"116","line":4,"column":1,"nodeType":"117","endLine":138,"endColumn":2},{"ruleId":"99","severity":1,"message":"109","line":2,"column":60,"nodeType":"101","messageId":"102","endLine":2,"endColumn":66},{"ruleId":"99","severity":1,"message":"111","line":112,"column":11,"nodeType":"101","messageId":"102","endLine":112,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":277,"column":15,"nodeType":"114","endLine":277,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":283,"column":15,"nodeType":"114","endLine":283,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":289,"column":15,"nodeType":"114","endLine":289,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":295,"column":15,"nodeType":"114","endLine":295,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":301,"column":15,"nodeType":"114","endLine":301,"endColumn":18},{"ruleId":"99","severity":1,"message":"118","line":2,"column":37,"nodeType":"101","messageId":"102","endLine":2,"endColumn":44},{"ruleId":"99","severity":1,"message":"109","line":2,"column":46,"nodeType":"101","messageId":"102","endLine":2,"endColumn":52},{"ruleId":"99","severity":1,"message":"119","line":5,"column":9,"nodeType":"101","messageId":"102","endLine":5,"endColumn":27},{"ruleId":"99","severity":1,"message":"120","line":5,"column":28,"nodeType":"101","messageId":"102","endLine":5,"endColumn":46},{"ruleId":"99","severity":1,"message":"121","line":5,"column":66,"nodeType":"101","messageId":"102","endLine":5,"endColumn":81},{"ruleId":"99","severity":1,"message":"111","line":105,"column":11,"nodeType":"101","messageId":"102","endLine":105,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":225,"column":15,"nodeType":"114","endLine":225,"endColumn":19},{"ruleId":"99","severity":1,"message":"109","line":2,"column":74,"nodeType":"101","messageId":"102","endLine":2,"endColumn":80},{"ruleId":"99","severity":1,"message":"122","line":5,"column":8,"nodeType":"101","messageId":"102","endLine":5,"endColumn":17},{"ruleId":"99","severity":1,"message":"119","line":7,"column":10,"nodeType":"101","messageId":"102","endLine":7,"endColumn":28},{"ruleId":"99","severity":1,"message":"121","line":7,"column":70,"nodeType":"101","messageId":"102","endLine":7,"endColumn":85},{"ruleId":"99","severity":1,"message":"111","line":89,"column":11,"nodeType":"101","messageId":"102","endLine":89,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":230,"column":15,"nodeType":"114","endLine":230,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":236,"column":15,"nodeType":"114","endLine":236,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":255,"column":17,"nodeType":"114","endLine":255,"endColumn":20},{"ruleId":"99","severity":1,"message":"123","line":4,"column":30,"nodeType":"101","messageId":"102","endLine":4,"endColumn":41},{"ruleId":"99","severity":1,"message":"124","line":4,"column":51,"nodeType":"101","messageId":"102","endLine":4,"endColumn":56},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'BrowserRouter' is defined but never used.","'Breadcrumb' is defined but never used.","'DesktopOutlined' is defined but never used.","'PieChartOutlined' is defined but never used.","'Header' is assigned a value but never used.","'Button' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'_this' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Divider' is defined but never used.","'UserSwitchOutlined' is defined but never used.","'CaretRightOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'PropTypes' is defined but never used.","'InputNumber' is defined but never used.","'Radio' is defined but never used.","no-global-assign","no-unsafe-negation"]