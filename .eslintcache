[{"D:\\devil13th\\github\\process-management-client\\src\\index.js":"1","D:\\devil13th\\github\\process-management-client\\src\\App.js":"2","D:\\devil13th\\github\\process-management-client\\src\\reportWebVitals.js":"3","D:\\devil13th\\github\\process-management-client\\src\\layout\\IndexLayout.jsx":"4","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\ProcessInstanceList.jsx":"5","D:\\devil13th\\github\\process-management-client\\src\\api\\ProcessApi.js":"6","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskList.jsx":"7","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskHisList.jsx":"8","D:\\devil13th\\github\\process-management-client\\src\\components\\processdefined\\ProcessDefinedList.jsx":"9","D:\\devil13th\\github\\process-management-client\\src\\axios.js":"10","D:\\devil13th\\github\\process-management-client\\src\\components\\processvariable\\ProcessVariable.jsx":"11","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskInfo.jsx":"12"},{"size":532,"mtime":1615261135256,"results":"13","hashOfConfig":"14"},{"size":284,"mtime":1612864120402,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611828054570,"results":"16","hashOfConfig":"14"},{"size":3387,"mtime":1615779998450,"results":"17","hashOfConfig":"14"},{"size":8678,"mtime":1615765065722,"results":"18","hashOfConfig":"14"},{"size":3547,"mtime":1615778590849,"results":"19","hashOfConfig":"14"},{"size":11581,"mtime":1615779125898,"results":"20","hashOfConfig":"14"},{"size":7088,"mtime":1615779362457,"results":"21","hashOfConfig":"14"},{"size":9220,"mtime":1615772365566,"results":"22","hashOfConfig":"14"},{"size":428,"mtime":1615261282157,"results":"23","hashOfConfig":"14"},{"size":7041,"mtime":1615774477814,"results":"24","hashOfConfig":"14"},{"size":3513,"mtime":1615779389663,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"iw0ona",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\devil13th\\github\\process-management-client\\src\\index.js",[],["58","59"],"D:\\devil13th\\github\\process-management-client\\src\\App.js",["60","61"],"import logo from './logo.svg';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport IndexLayout from '@/layout/IndexLayout'\nfunction App() {\n  return (\n    <BrowserRouter>\n    <IndexLayout></IndexLayout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","D:\\devil13th\\github\\process-management-client\\src\\reportWebVitals.js",[],"D:\\devil13th\\github\\process-management-client\\src\\layout\\IndexLayout.jsx",["62","63","64","65","66","67","68","69","70"],"D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\ProcessInstanceList.jsx",["71","72","73","74","75","76","77"],"import React from \"react\";\r\nimport { Tabs, Input, Table, Tooltip, Divider, Modal, Button,Popconfirm ,message} from \"antd\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  DeleteOutlined,\r\n  UnorderedListOutlined,\r\n  SettingOutlined,\r\n  OrderedListOutlined\r\n} from \"@ant-design/icons\";\r\nimport TaskList from \"./TaskList\";\r\nimport TaskHisList from \"./TaskHisList\";\r\nimport ProcessVariable from '../processvariable/ProcessVariable'\r\nimport ProcessApi from \"@/api/ProcessApi\";\r\n\r\nconst { Search } = Input;\r\nconst { TabPane } = Tabs;\r\nclass ProcessInstanceList extends React.Component {\r\n  state = {\r\n    tableData: [],\r\n    tableLoading: false,\r\n    keyWords: \"\",\r\n    processInstanceId: \"\",\r\n    taskListModalVisible: false,\r\n    taskHisListModalVisible:false,\r\n    processVarModalVisible:false,\r\n    executionVar:'',\r\n    executionLocalVar:'',\r\n    pagination: {\r\n      current: 1,\r\n      pageSize: 10,\r\n      pageSizeOptions: [5, 10, 15, 50, 100],\r\n      showTotal: (total, range) => {\r\n        return `${total} items`;\r\n      },\r\n      showSizeChanger: true,\r\n      showQuickJumper: true,\r\n    },\r\n    // 排序\r\n    sorter: {\r\n      field: \"procinst.start_time_\",\r\n      order: \"descend\",\r\n    },\r\n  };\r\n\r\n  onSearch = (v) => {\r\n    this.setState(\r\n      {\r\n        keyWords: v,\r\n      },\r\n      () => {\r\n        this.queryList(true);\r\n      }\r\n    );\r\n  };\r\n\r\n  queryList = (clearPage) => {\r\n    console.log(\"===\", this.state.pagination);\r\n    if (clearPage) {\r\n      // 清除分页\r\n      this.setState(\r\n        {\r\n          pagination: {\r\n            showTotal: (total, range) => {\r\n              return `${total} items`;\r\n            },\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            ...this.state.pagination,\r\n            current: 1,\r\n          },\r\n        },\r\n        this.basicQuery\r\n      );\r\n    } else {\r\n      this.basicQuery();\r\n    }\r\n  };\r\n\r\n  // 基础查询\r\n  basicQuery = () => {\r\n    const _this = this;\r\n    const queryCondition = {\r\n      current: this.state.pagination.current,\r\n      pageSize: this.state.pagination.pageSize,\r\n      total: this.state.pagination.total,\r\n      sortField: this.state.sorter.field,\r\n      sortOrder: this.state.sorter.order.replace(\"end\", \"\"),\r\n      keyWords: this.state.keyWords,\r\n    };\r\n    this.setState({ tableLoading: true });\r\n    ProcessApi.queryProcessInstancePage(queryCondition).then((result) => {\r\n      const r = result.data;\r\n      this.setState({\r\n        tableData: r.list,\r\n        tableLoading: false,\r\n        pagination: {\r\n          showTotal: (total, range) => {\r\n            return `${total} items`;\r\n          },\r\n          showSizeChanger: true,\r\n          showQuickJumper: true,\r\n          current: r.pageNum,\r\n          pageSize: r.pageSize,\r\n          total: r.total,\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  // 分页/排序 事件处理\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    const st = {\r\n      pagination: {\r\n        showTotal: (total, range) => {\r\n          return `${total} items`;\r\n        },\r\n        showSizeChanger: true,\r\n        showQuickJumper: true,\r\n        current: pagination.current,\r\n        pageSize: pagination.pageSize,\r\n        total: this.state.pagination.total,\r\n      },\r\n    };\r\n    if (sorter.field && sorter.order) {\r\n      st.sorter = {\r\n        field: sorter.field,\r\n        order: sorter.order,\r\n      };\r\n    } else {\r\n      st.sorter = {\r\n        field: \"\",\r\n        order: \"\",\r\n      };\r\n    }\r\n    this.setState(st, this.queryList);\r\n  };\r\n  openTaskListModal = (processInstanceId) => {\r\n    this.setState({\r\n      processInstanceId: processInstanceId,\r\n      taskListModalVisible: true,\r\n    });\r\n  };\r\n  openTaskHisListModal = (processInstanceId) => {\r\n    this.setState({\r\n      processInstanceId: processInstanceId,\r\n      taskHisListModalVisible: true,\r\n    });\r\n  };\r\n  closeModal = () => {\r\n    this.setState({\r\n      taskListModalVisible: false,\r\n      taskHisListModalVisible:false,\r\n      processVarModalVisible:false,\r\n    });\r\n  };\r\n\r\n  openProcessVar(executionId){\r\n\r\n    this.setState({processVarModalVisible:true,processInstanceId:executionId})\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.queryList();\r\n  }\r\n\r\n  deleteProcessInstance = (record) =>{\r\n    ProcessApi.deleteProcessInstance(record.processInstanceId).then( r => {\r\n      if(r.data === 'SUCCESS'){\r\n        message.success(\"Process Instance Be Deleted successfully\")\r\n        this.queryList(false)\r\n      }else{\r\n        message.error(\"Process Instance Deleted Failure\")\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const columns = [\r\n      {\r\n        title: \"Def ID\",\r\n        dataIndex: \"procDefId\",\r\n      },\r\n      {\r\n        title: \"Key\",\r\n        dataIndex: \"businessKey\",\r\n      },\r\n      {\r\n        title: \"PI Id\",\r\n        dataIndex: \"processInstanceId\",\r\n      },\r\n      {\r\n        title: \"Start\",\r\n        dataIndex: \"processInstanceStartTime\",\r\n      },\r\n      {\r\n        title: \"End\",\r\n        dataIndex: \"processInstanceEndTime\",\r\n      },\r\n      {\r\n        title: \"Operate\",\r\n        key: \"operate\",\r\n        render: (text, record) => (\r\n          <div>\r\n            <Tooltip title=\"Curent Task\">\r\n              <a>\r\n                <UnorderedListOutlined\r\n                  onClick={() => {\r\n                    this.openTaskListModal(record.processInstanceId);\r\n                  }}\r\n                />\r\n              </a>\r\n            </Tooltip>\r\n            <Divider type=\"vertical\"></Divider>\r\n            <Tooltip title=\"Step History\">\r\n              <a>\r\n                <OrderedListOutlined\r\n                  onClick={() => {\r\n                    this.openTaskHisListModal(record.processInstanceId);\r\n                  }}\r\n                />\r\n              </a>\r\n            </Tooltip>\r\n            \r\n            <Divider type=\"vertical\"></Divider>\r\n\r\n\r\n            <Popconfirm\r\n              placement=\"left\"\r\n              title=\"Are you sure to delete this process instance?\"\r\n              onConfirm={() => {\r\n                this.deleteProcessInstance(record);\r\n              }}\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n            >\r\n              <Tooltip title=\"Delete Process Instance\">\r\n              <a>\r\n                <DeleteOutlined />\r\n              </a>\r\n            </Tooltip>\r\n            </Popconfirm>\r\n\r\n\r\n\r\n            \r\n            <Divider type=\"vertical\"></Divider>\r\n            <Tooltip title=\"Set Process Global Variable\">\r\n              <a>\r\n                <SettingOutlined onClick={() => {this.openProcessVar(record.processInstanceId)}}/>\r\n              </a>\r\n            </Tooltip>\r\n            \r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const operations = {\r\n      right: (\r\n        <Search\r\n          placeholder=\"key words\"\r\n          onSearch={this.onSearch}\r\n          style={{ width: 200 }}\r\n          size=\"small\"\r\n          enterButton\r\n        />\r\n      ),\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Tabs type=\"card\" tabBarExtraContent={operations}>\r\n          <TabPane tab=\"Process Instance Management\" ></TabPane>\r\n        </Tabs>\r\n\r\n        <Table\r\n          onChange={this.handleTableChange}\r\n          columns={columns}\r\n          dataSource={this.state.tableData}\r\n          pagination={this.state.pagination}\r\n          size=\"small\"\r\n          rowKey=\"processInstanceId\"\r\n        />\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          style={{top:32}}\r\n          title={<UnorderedListOutlined />}\r\n          visible={this.state.taskListModalVisible}\r\n          onOk={this.closeModal}\r\n          onCancel={this.closeModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <TaskList processInstanceId={this.state.processInstanceId}></TaskList>\r\n        </Modal>\r\n\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          style={{top:32}}\r\n          title={<OrderedListOutlined/>}\r\n          visible={this.state.taskHisListModalVisible}\r\n          onOk={this.closeModal}\r\n          onCancel={this.closeModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <TaskHisList processInstanceId={this.state.processInstanceId}></TaskHisList>\r\n        </Modal>\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          title={<OrderedListOutlined/>}\r\n          visible={this.state.processVarModalVisible}\r\n          onOk={this.closeModal}\r\n          onCancel={this.closeModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <ProcessVariable processVarType='execution' id={this.state.processInstanceId}></ProcessVariable>\r\n        </Modal>\r\n\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProcessInstanceList;\r\n","D:\\devil13th\\github\\process-management-client\\src\\api\\ProcessApi.js",["78"],"import axios from '@/axios';\r\n\r\nconst context = \"/api\"\r\nexport default {\r\n  startProcessByDefId:function(data){\r\n    return axios({\r\n      method: 'post',\r\n      url: `${context}/startProcessByDefId`,\r\n      data: data\r\n    });\r\n  },\r\n  startProcessByDefKey:function(data){\r\n    return axios({\r\n      method: 'post',\r\n      url: `${context}/startProcessByDefKey`,\r\n      data: data\r\n    });\r\n  },\r\n  deleteDeploy:function(deployId){\r\n    return axios({\r\n      method: 'delete',\r\n      url: `${context}/deleteDeploy/${deployId}`\r\n    });\r\n  },\r\n  nextStep:function(taskId,processVariable){\r\n    return axios({\r\n      method: 'post',\r\n      url: `${context}/nextStep`,\r\n      data: {taskId,taskAssignee:'ADMIN',processVariable}\r\n    });\r\n  },\r\n  queryProcessDef:function(params){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryProcessDef`,\r\n      params: params\r\n    });\r\n  },\r\n  queryProcessInstancePage:function(params){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryProcessInstancePage`,\r\n      params: params\r\n    });\r\n  },\r\n  deleteProcessInstance:function(processInstanceId){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/cancelProcessInstance`,\r\n      params: {processInstanceId}\r\n    });\r\n  },\r\n  queryTaskPage:function(params){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryTaskPage`,\r\n      params: params\r\n    });\r\n  },\r\n  queryTaskHisPage:function(params){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryTaskHisPage`,\r\n      params: params\r\n    });\r\n  },\r\n  queryProcessVarByExecutionId:function(executionId){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryProcessVarByExecutionId`,\r\n      params:{executionId}\r\n    });\r\n  },\r\n  queryProcessVarLocalByExecutionId:function(executionId){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryProcessVarLocalByExecutionId`,\r\n      params:{executionId}\r\n    });\r\n  },\r\n  queryProcessVarByTaskId:function(taskId){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryProcessVarByTaskId`,\r\n      params:{taskId}\r\n    });\r\n  },\r\n  queryProcessVarLocalByTaskId:function(taskId){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryProcessVarLocalByTaskId`,\r\n      params:{taskId}\r\n    });\r\n  },\r\n\r\n  setProcessVarGlobalByExecutionId:function(data){\r\n    return axios({\r\n      method: 'post',\r\n      url: `${context}/setProcessVarGlobalByExecutionId`,\r\n      data\r\n    });\r\n  },\r\n  setProcessVarLocalByExecutionId:function(data){\r\n    return axios({\r\n      method: 'post',\r\n      url: `${context}/setProcessVarLocalByExecutionId`,\r\n      data\r\n    });\r\n  },\r\n  setProcessVarGlobalByTaskId:function(data){\r\n    return axios({\r\n      method: 'post',\r\n      url: `${context}/setProcessVarGlobalByTaskId`,\r\n      data\r\n    });\r\n  },\r\n  setProcessVarLocalByTaskId:function(data){\r\n    return axios({\r\n      method: 'post',\r\n      url: `${context}/setProcessVarLocalByTaskId`,\r\n      data\r\n    });\r\n  },\r\n  queryTaskByTaskId:function(taskId){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryTaskByTaskId/${taskId}`\r\n    })\r\n  }, \r\n  queryTaskHisByTaskHisId:function(taskHisId){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/queryTaskHisByTaskHisId/${taskHisId}`\r\n    })\r\n  },\r\n  setAssigneeOfTask:function(taskId,userId){\r\n    return axios({\r\n      method: 'get',\r\n      url: `${context}/setAssigneeOfTask?taskId=${taskId}&userId=${userId}`\r\n    })\r\n  }\r\n \r\n  \r\n}","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskList.jsx",["79","80","81","82","83","84","85"],"import React from 'react'\r\nimport {message,Modal,Tabs ,Input ,Table,Tooltip ,Divider ,Button} from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport ProcessApi from '@/api/ProcessApi'\r\nimport ProcessVariable from '../processvariable/ProcessVariable'\r\nimport TaskInfo from './TaskInfo'\r\nimport {OrderedListOutlined,UserSwitchOutlined,CaretRightOutlined,InfoCircleOutlined,SettingOutlined} from '@ant-design/icons';\r\nconst { TextArea,Search } = Input;\r\nconst { TabPane } = Tabs;\r\nclass TaskList extends React.Component {\r\n  state = {\r\n    tableData:[],\r\n    tableLoading:false,\r\n    keyWords:'',\r\n    processInstanceId:'',\r\n    taskId:'',\r\n    taskHisId:'',\r\n    tid:'',\r\n    processVarType:'',\r\n    nextStepModalVisible:false,\r\n    processVarModalVisible:false,\r\n    taskDetailModalVisible:false,\r\n    reassignModalVisible:false,\r\n    processVariable:{},\r\n    queryCondition:{\r\n      businessKey:'',\r\n      assignee:'',\r\n      processInstanceId:''\r\n    },\r\n    pagination:{\r\n      current:1,\r\n      pageSize:10,\r\n      pageSizeOptions:[5,10,15,50,100],\r\n      showTotal:(total, range)=>{ return `${total} items`},\r\n      showSizeChanger:true,\r\n      showQuickJumper:true\r\n    },\r\n    // 排序\r\n    sorter: {\r\n      field: 'task.create_time_ ',\r\n      order: 'descend',\r\n    },\r\n  }\r\n\r\n  //对标签属性进行类型、必要性的限制\r\n  static propTypes = {\r\n    businessKey:PropTypes.string,\r\n    assignee:PropTypes.string,\r\n    processInstanceId:PropTypes.string\r\n  }\r\n\r\n  //指定默认标签属性值\r\n  static defaultProps = {\r\n    businessKey:'',\r\n    assignee:'',\r\n    processInstanceId:''\r\n  }\r\n\r\n  componentDidMount(){\r\n    const queryCondition = {}\r\n    if(this.props.businessKey){\r\n      queryCondition.businessKey = this.props.businessKey\r\n    }\r\n    if(this.props.assignee){\r\n      queryCondition.assignee = this.props.assignee\r\n    }\r\n    if(this.props.processInstanceId){\r\n      queryCondition.processInstanceId = this.props.processInstanceId\r\n    }\r\n    this.setState({queryCondition},this.queryList)\r\n\r\n  }\r\n\r\n  onSearch = (v) => {\r\n    this.setState({\r\n      keyWords:v\r\n    },() => {\r\n      this.queryList(true);\r\n    })\r\n  }\r\n\r\n  // static getDerivedStateFromProps(props,state){\r\n  //   console.log(\"---xxxx---\",props,state)\r\n  //   if(props.processInstanceId !== state.queryCondition.processInstanceId){\r\n  //     return {processInstanceId:props.processInstanceId}      \r\n  //   }\r\n  //   return null;\r\n  // }\r\n\r\n  queryList = (clearPage) => {\r\n    console.log(\"===\",this.state.pagination)\r\n    if (clearPage) {\r\n      // 清除分页\r\n      this.setState(\r\n        {\r\n          pagination: {\r\n            showTotal:(total, range)=>{ return `${total} items`},\r\n            showSizeChanger:true,\r\n            showQuickJumper:true,\r\n            ...this.state.pagination,\r\n            current: 1,\r\n          },\r\n        },\r\n        this.basicQuery\r\n      )\r\n    } else {\r\n      this.basicQuery()\r\n    }\r\n  }\r\n\r\n  // 基础查询\r\n  basicQuery = () => {\r\n    const _this = this\r\n    const queryCondition = {\r\n      current: this.state.pagination.current,\r\n      pageSize: this.state.pagination.pageSize,\r\n      total: this.state.pagination.total,\r\n      sortField: this.state.sorter.field,\r\n      sortOrder: this.state.sorter.order.replace('end', ''),\r\n      keyWords:this.state.keyWords,\r\n      ...this.state.queryCondition\r\n    }\r\n    this.setState({ tableLoading: true })\r\n    ProcessApi.queryTaskPage(queryCondition).then( result => {\r\n      const r = result.data;\r\n      this.setState({\r\n        tableData:r.list,\r\n        tableLoading: false,\r\n        pagination: {\r\n          showTotal:(total, range)=>{ return `${total} items`},\r\n          showSizeChanger:true,\r\n          showQuickJumper:true,\r\n          current: r.pageNum,\r\n          pageSize: r.pageSize,\r\n          total: r.total,\r\n        }\r\n      })\r\n    })\r\n\r\n    \r\n  }\r\n\r\n  // 分页/排序 事件处理\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    \r\n    const st = {\r\n      pagination:{\r\n        showTotal:(total, range)=>{ return `${total} items`},\r\n        showSizeChanger:true,\r\n        showQuickJumper:true,\r\n        current: pagination.current,\r\n        pageSize: pagination.pageSize,\r\n        total: this.state.pagination.total,\r\n      },\r\n    }\r\n    if (sorter.field && sorter.order) {\r\n      st.sorter = {\r\n        field: sorter.field,\r\n        order: sorter.order,\r\n      }\r\n    } else {\r\n      st.sorter = {\r\n        field: '',\r\n        order: '',\r\n      }\r\n    }\r\n    this.setState(st, this.queryList)\r\n    \r\n  }\r\n\r\n\r\n\r\n  openNextStepModal = (record) => {\r\n    this.setState({\r\n      taskId:record.taskId,\r\n      nextStepModalVisible:true\r\n    })\r\n  }\r\n\r\n  closeNextStepModal = () => {\r\n    this.setState({taskId:'',nextStepModalVisible:false})\r\n  }\r\n\r\n\r\n  openTaskDetailModal = (record) => {\r\n    this.setState({\r\n      taskId:record.taskId,\r\n      taskDetailModalVisible:true\r\n    })\r\n  }\r\n  closeTaskDetailModal = () => {\r\n    this.setState({\r\n      taskId:\"\",\r\n      taskDetailModalVisible:false\r\n    })\r\n  }\r\n\r\n  nextStep = () => {\r\n    \r\n\r\n    let processVar = {}\r\n    \r\n    try{\r\n      processVar = JSON.parse(this.state.processVariable);\r\n      \r\n    }catch(e){\r\n      message.error(\"Json Parse Error !\")\r\n      return\r\n    }\r\n\r\n    ProcessApi.nextStep(this.state.taskId,processVar).then(r=>{\r\n      message.success(\"Task Be Completed Success\")\r\n      this.queryList(false)\r\n      this.closeNextStepModal()\r\n    })\r\n    \r\n  }\r\n\r\n  vmodel = (name,v) => {\r\n    this.setState({[name]:v});\r\n  }\r\n  openTaskVar = (taskId) =>{\r\n    this.setState({processVarModalVisible:true,tid:taskId,processVarType:\"task\"})\r\n  }\r\n  openExecutionVar = (executionId) =>{\r\n    this.setState({processVarModalVisible:true,tid:executionId,processVarType:\"execution\"})\r\n  }\r\n  closeProcessVarModal = () =>{\r\n    this.setState({processVarModalVisible:false,tid:'',processVarType:\"\"})\r\n  }\r\n  openReassignModal = (record) => {\r\n    this.setState({\r\n      taskId:record.taskId,\r\n      reassignModalVisible:true,\r\n      userId:record.taskAssignee\r\n    })\r\n  }\r\n  closeReassignModal = (record) => {\r\n    this.setState({\r\n      taskId:'',\r\n      reassignModalVisible:false\r\n    })\r\n  }\r\n  reAssigneeOfTask = () => {\r\n    ProcessApi.setAssigneeOfTask(this.state.taskId,this.state.userId).then( r=> {\r\n      console.log(r)\r\n      this.queryList(false)\r\n      this.closeReassignModal()\r\n    })\r\n  }\r\n\r\n\r\n\r\n  \r\n  render() {\r\n    console.log(\"render...\")\r\n    const columns = [\r\n      {\r\n        title: \"Def ID\",\r\n        dataIndex: \"procDefId\",\r\n      },\r\n      {\r\n        title: \"Key\",\r\n        dataIndex: \"businessKey\",\r\n      },\r\n      {\r\n        title: \"PI Id\",\r\n        dataIndex: \"processInstanceId\",\r\n      },\r\n      {\r\n        title: \"Exec Id\",\r\n        dataIndex: \"executionId\",\r\n      },\r\n      {\r\n        title: \"Task Id\",\r\n        dataIndex: \"taskId\",\r\n      },\r\n      {\r\n        title: \"Task Name\",\r\n        dataIndex: \"taskName\",\r\n      },\r\n      {\r\n        title: \"Assignee\",\r\n        dataIndex: \"taskAssignee\",\r\n      },\r\n      {\r\n        title: \"Start\",\r\n        dataIndex: \"taskStartTime\",\r\n      },\r\n      {\r\n        title: \"Form\",\r\n        dataIndex: \"taskFormKey\",\r\n      },\r\n      {\r\n        title: \"Operate\",\r\n        key: \"operate\",\r\n        render: (text, record) => (\r\n          <div>\r\n            <Tooltip title=\"Detail\">\r\n              <a>\r\n                <InfoCircleOutlined onClick={() => {this.openTaskDetailModal(record)}}/>\r\n              </a>\r\n            </Tooltip>\r\n            <Divider type=\"vertical\"></Divider>\r\n            <Tooltip title=\"Replace Assignee\">\r\n              <a>\r\n                <UserSwitchOutlined onClick={ () => {this.openReassignModal(record)}}/>\r\n              </a>\r\n            </Tooltip>\r\n            <Divider type=\"vertical\"></Divider>\r\n            <Tooltip title=\"Set Task Variable\">\r\n              <a>\r\n              <SettingOutlined onClick={() => {this.openTaskVar(record.taskId)}}/>\r\n              </a>\r\n            </Tooltip>\r\n            <Divider type=\"vertical\"></Divider>\r\n            <Tooltip title=\"Set Execution Variable\">\r\n              <a>\r\n              <SettingOutlined onClick={() => {this.openExecutionVar(record.executionId)}}/>\r\n              </a>\r\n            </Tooltip>\r\n            <Divider type=\"vertical\"></Divider>\r\n            <Tooltip title=\"Next Step\">\r\n              <a>\r\n                <CaretRightOutlined onClick={()=>{this.openNextStepModal(record)}} />\r\n              </a>\r\n            </Tooltip>\r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n    \r\n    const operations = {\r\n      right: <Search\r\n      placeholder=\"key words\"\r\n      onSearch={this.onSearch}\r\n      style={{ width: 200 }}\r\n      size=\"small\"\r\n      enterButton\r\n    />\r\n    }\r\n    return (\r\n      <div>\r\n        <Tabs type=\"card\" tabBarExtraContent={operations}>\r\n          <TabPane tab=\"Current Task\" key=\"1\"></TabPane>\r\n        </Tabs>\r\n\r\n        {/* {JSON.stringify(this.state)} */}\r\n\r\n        <Table\r\n          onChange={this.handleTableChange}\r\n          columns={columns}\r\n          dataSource={this.state.tableData}\r\n          pagination={this.state.pagination}\r\n          size=\"small\"\r\n          rowKey={(record) => {\r\n            return (\r\n              record.processInstanceId +\r\n              \"_\" +\r\n              record.taskId +\r\n              \"_\" +\r\n              record.taskAssignee\r\n            );\r\n          }}\r\n        />\r\n\r\n        <Modal\r\n          title=\"Next Step\"\r\n          style={{top:32}}\r\n          visible={this.state.nextStepModalVisible}\r\n          onOk={this.nextStep}\r\n          onCancel={this.closeNextStepModal}\r\n          width=\"80%\"\r\n        >\r\n        \r\n          <div style={{ marginTop: \"8px\" }}>\r\n            <TextArea\r\n              rows={4}\r\n              onChange={(e) => {\r\n                this.vmodel(\"processVariable\", e.target.value);\r\n              }}\r\n              placeholder=\"Process Variable (JSON) \"\r\n            />\r\n\r\n            <div\r\n              dangerouslySetInnerHTML={{\r\n                __html: `Eg.<br/>{<br/>\"users\":[\"zhangsan\",\"lisi\",\"wangwu\"],<br/>\"judge\":\"”zhaoliu\"<br/>}`,\r\n              }}\r\n            ></div>\r\n          </div>\r\n        </Modal>\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          style={{top:32}}\r\n          title={<OrderedListOutlined/>}\r\n          visible={this.state.processVarModalVisible}\r\n          onOk={this.closeProcessVarModal}\r\n          onCancel={this.closeProcessVarModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <ProcessVariable processVarType={this.state.processVarType} id={this.state.tid}></ProcessVariable>\r\n        </Modal>\r\n\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          style={{top:32}}\r\n          title={<OrderedListOutlined/>}\r\n          visible={this.state.taskDetailModalVisible}\r\n          onOk={this.closeTaskDetailModal}\r\n          onCancel={this.closeTaskDetailModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <TaskInfo taskId={this.state.taskId} ></TaskInfo>\r\n        </Modal>\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          style={{top:32}}\r\n          title={<OrderedListOutlined/>}\r\n          visible={this.state.reassignModalVisible}\r\n          onOk={this.reAssigneeOfTask}\r\n          onCancel={this.closeReassignModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <Input value={this.state.userId} onChange={(e) => { this.vmodel('userId', e.target.value) }}/>\r\n        </Modal>\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskList","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskHisList.jsx",["86","87","88","89","90","91","92"],"import React from 'react'\r\nimport {Tabs ,Input ,Table,Tooltip ,Divider ,Button,Modal} from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport ProcessApi from '@/api/ProcessApi'\r\nimport {UserSwitchOutlined,CaretRightOutlined,InfoCircleOutlined,SettingOutlined,OrderedListOutlined} from '@ant-design/icons';\r\nimport TaskInfo from './TaskInfo'\r\nconst { Search } = Input;\r\nconst { TabPane } = Tabs;\r\nclass TaskHisList extends React.Component {\r\n  state = {\r\n    tableData:[],\r\n    tableLoading:false,\r\n    keyWords:'',\r\n    processInstanceId:'',\r\n    taskDetailModalVisible:false,\r\n    taskHisId:'',\r\n    queryCondition:{\r\n      businessKey:'',\r\n      assignee:'',\r\n      processInstanceId:''\r\n    },\r\n    pagination:{\r\n      current:1,\r\n      pageSize:10,\r\n      pageSizeOptions:[5,10,15,50,100],\r\n      showTotal:(total, range)=>{ return `${total} items`},\r\n      showSizeChanger:true,\r\n      showQuickJumper:true\r\n    },\r\n    // 排序\r\n    sorter: {\r\n      field: 'taskhis.start_time_ ',\r\n      order: 'descend',\r\n    },\r\n  }\r\n\r\n  //对标签属性进行类型、必要性的限制\r\n  static propTypes = {\r\n    businessKey:PropTypes.string,\r\n    assignee:PropTypes.string,\r\n    processInstanceId:PropTypes.string\r\n  }\r\n\r\n  //指定默认标签属性值\r\n  static defaultProps = {\r\n    businessKey:'',\r\n    assignee:'',\r\n    processInstanceId:''\r\n  }\r\n\r\n  componentDidMount(){\r\n    const queryCondition = {}\r\n    if(this.props.businessKey){\r\n      queryCondition.businessKey = this.props.businessKey\r\n    }\r\n    if(this.props.assignee){\r\n      queryCondition.assignee = this.props.assignee\r\n    }\r\n    if(this.props.processInstanceId){\r\n      queryCondition.processInstanceId = this.props.processInstanceId\r\n    }\r\n    this.setState({queryCondition},this.queryList)\r\n\r\n  }\r\n\r\n  onSearch = (v) => {\r\n    this.setState({\r\n      keyWords:v\r\n    },() => {\r\n      this.queryList(true);\r\n    })\r\n  }\r\n\r\n  static getDerivedStateFromProps(props,state){\r\n    console.log(\"---xxxx---\",props,state)\r\n    if(props.processInstanceId !== state.queryCondition.processInstanceId){\r\n      return {processInstanceId:props.processInstanceId}      \r\n    }\r\n    return null;\r\n  }\r\n\r\n  queryList = (clearPage) => {\r\n    console.log(\"===\",this.state.pagination)\r\n    if (clearPage) {\r\n      // 清除分页\r\n      this.setState(\r\n        {\r\n          pagination: {\r\n            showTotal:(total, range)=>{ return `${total} items`},\r\n            showSizeChanger:true,\r\n            showQuickJumper:true,\r\n            ...this.state.pagination,\r\n            current: 1,\r\n          },\r\n        },\r\n        this.basicQuery\r\n      )\r\n    } else {\r\n      this.basicQuery()\r\n    }\r\n  }\r\n\r\n  // 基础查询\r\n  basicQuery = () => {\r\n    const _this = this\r\n    const queryCondition = {\r\n      current: this.state.pagination.current,\r\n      pageSize: this.state.pagination.pageSize,\r\n      total: this.state.pagination.total,\r\n      sortField: this.state.sorter.field,\r\n      sortOrder: this.state.sorter.order.replace('end', ''),\r\n      keyWords:this.state.keyWords,\r\n      ...this.state.queryCondition\r\n    }\r\n    this.setState({ tableLoading: true })\r\n    ProcessApi.queryTaskHisPage(queryCondition).then( result => {\r\n      const r = result.data;\r\n      console.log(r)\r\n      this.setState({\r\n        tableData:r.list,\r\n        tableLoading: false,\r\n        pagination: {\r\n          showTotal:(total, range)=>{ return `${total} items`},\r\n          showSizeChanger:true,\r\n          showQuickJumper:true,\r\n          current: r.pageNum,\r\n          pageSize: r.pageSize,\r\n          total: r.total,\r\n        }\r\n      })\r\n    })\r\n\r\n    \r\n  }\r\n\r\n  // 分页/排序 事件处理\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    \r\n    const st = {\r\n      pagination:{\r\n        showTotal:(total, range)=>{ return `${total} items`},\r\n        showSizeChanger:true,\r\n        showQuickJumper:true,\r\n        current: pagination.current,\r\n        pageSize: pagination.pageSize,\r\n        total: this.state.pagination.total,\r\n      },\r\n    }\r\n    if (sorter.field && sorter.order) {\r\n      st.sorter = {\r\n        field: sorter.field,\r\n        order: sorter.order,\r\n      }\r\n    } else {\r\n      st.sorter = {\r\n        field: '',\r\n        order: '',\r\n      }\r\n    }\r\n    this.setState(st, this.queryList)\r\n    \r\n  }\r\n\r\n\r\n  openTaskDetailModal = (record) => {\r\n    this.setState({\r\n      taskHisId:record.taskHisId,\r\n      taskDetailModalVisible:true\r\n    })\r\n  }\r\n  closeTaskDetailModal = () => {\r\n    this.setState({\r\n      taskHisId:\"\",\r\n      taskDetailModalVisible:false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    console.log(\"render...\")\r\n    const columns = [\r\n      {\r\n        title: \"Def ID\",\r\n        dataIndex: \"procDefId\",\r\n      },\r\n      {\r\n        title: \"Key\",\r\n        dataIndex: \"businessKey\",\r\n      },\r\n      {\r\n        title: \"PI Id\",\r\n        dataIndex: \"processInstanceId\",\r\n      },\r\n      {\r\n        title: \"Task His Id\",\r\n        dataIndex: \"taskHisId\",\r\n      },\r\n\r\n      \r\n      {\r\n        title: \"Task Name\",\r\n        dataIndex: \"taskName\",\r\n      },\r\n      {\r\n        title: \"Assignee\",\r\n        dataIndex: \"taskAssignee\",\r\n      },\r\n      {\r\n        title: \"Start\",\r\n        dataIndex: \"taskHisStartTime\",\r\n      },\r\n      {\r\n        title: \"End\",\r\n        dataIndex: \"taskHisEndTime\",\r\n      },\r\n      {\r\n        title: \"Form\",\r\n        dataIndex: \"taskFormKey\",\r\n      },\r\n      {\r\n        title: \"Operate\",\r\n        key: \"operate\",\r\n        render: (text, record) => (\r\n          <div>\r\n            <Tooltip title=\"Detail\">\r\n              <a >\r\n                <InfoCircleOutlined onClick={ () => this.openTaskDetailModal(record)}/>\r\n              </a>\r\n            </Tooltip>\r\n            \r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n    \r\n    const operations = {\r\n      right: <Search\r\n      placeholder=\"key words\"\r\n      onSearch={this.onSearch}\r\n      style={{ width: 200 }}\r\n      size=\"small\"\r\n      enterButton\r\n    />\r\n    }\r\n    return (\r\n      <div>\r\n        <Tabs type=\"card\" tabBarExtraContent={operations}>\r\n          <TabPane tab=\"Task His\" key=\"1\"></TabPane>\r\n        </Tabs>\r\n\r\n      \r\n        {/* {JSON.stringify(this.state)} */}\r\n       \r\n        <Table\r\n          onChange={this.handleTableChange}\r\n          columns={columns}\r\n          dataSource={this.state.tableData}\r\n          pagination={this.state.pagination}\r\n          size=\"small\"\r\n          rowKey={(record) => {\r\n            return (\r\n              record.processInstanceId +\r\n              \"_\" +\r\n              record.taskHisId +\r\n              \"_\" +\r\n              record.taskAssignee\r\n            );\r\n          }}\r\n        />\r\n\r\n\r\n        <Modal\r\n          width={\"100%\"}\r\n          style={{top:32}}\r\n          title={<OrderedListOutlined/>}\r\n          visible={this.state.taskDetailModalVisible}\r\n          onOk={this.closeTaskDetailModal}\r\n          onCancel={this.closeTaskDetailModal}\r\n          destroyOnClose={true}\r\n          maskClosable={false}\r\n        >\r\n          <TaskInfo taskHisId={this.state.taskHisId} ></TaskInfo>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskHisList","D:\\devil13th\\github\\process-management-client\\src\\components\\processdefined\\ProcessDefinedList.jsx",["93","94","95","96","97","98","99","100"],"import React from 'react'\r\nimport { Popconfirm,Upload, Modal, Tabs, Input, Table, Tooltip, Divider, Button, message } from 'antd'\r\n\r\n\r\nimport PropTypes from 'prop-types'\r\nimport ProcessApi from '@/api/ProcessApi'\r\nimport { UserSwitchOutlined, CaretRightOutlined, InfoCircleOutlined, SettingOutlined, InboxOutlined,DeleteOutlined } from '@ant-design/icons';\r\nconst { Search, TextArea } = Input;\r\nconst { TabPane } = Tabs;\r\nconst { Dragger } = Upload;\r\n\r\nclass ProcessDefinedList extends React.Component {\r\n  state = {\r\n    tableData: [],\r\n    tableLoading: false,\r\n    keyWords: '',\r\n    procDefId: '',\r\n    startProcessModalVisible: false,\r\n    businessKey: '',\r\n    processVariable: '',\r\n    queryCondition: {\r\n      businessKey: '',\r\n      assignee: '',\r\n      processInstanceId: ''\r\n    },\r\n    pagination: {\r\n      current: 1,\r\n      pageSize: 10,\r\n      pageSizeOptions: [5, 10, 15, 50, 100],\r\n      showTotal: (total, range) => { return `${total} items` },\r\n      showSizeChanger: true,\r\n      showQuickJumper: true\r\n    },\r\n    // 排序\r\n    sorter: {\r\n      field: 'id_',\r\n      order: 'descend',\r\n    },\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    const queryCondition = {}\r\n\r\n    this.setState({ queryCondition }, this.queryList)\r\n\r\n  }\r\n\r\n  onSearch = (v) => {\r\n    this.setState({\r\n      keyWords: v\r\n    }, () => {\r\n      this.queryList(true);\r\n    })\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    console.log(\"---xxxx---\", props, state)\r\n    if (props.processInstanceId !== state.queryCondition.processInstanceId) {\r\n      return { processInstanceId: props.processInstanceId }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  queryList = (clearPage) => {\r\n    console.log(\"===\", this.state.pagination)\r\n    if (clearPage) {\r\n      // 清除分页\r\n      this.setState(\r\n        {\r\n          pagination: {\r\n            showTotal: (total, range) => { return `${total} items` },\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            ...this.state.pagination,\r\n            current: 1,\r\n          },\r\n        },\r\n        this.basicQuery\r\n      )\r\n    } else {\r\n      this.basicQuery()\r\n    }\r\n  }\r\n\r\n  // 基础查询\r\n  basicQuery = () => {\r\n    const _this = this\r\n    const queryCondition = {\r\n      current: this.state.pagination.current,\r\n      pageSize: this.state.pagination.pageSize,\r\n      total: this.state.pagination.total,\r\n      sortField: this.state.sorter.field,\r\n      sortOrder: this.state.sorter.order.replace('end', ''),\r\n      keyWords: this.state.keyWords,\r\n      ...this.state.queryCondition\r\n    }\r\n    this.setState({ tableLoading: true })\r\n    ProcessApi.queryProcessDef(queryCondition).then(result => {\r\n      const r = result.data;\r\n      console.log(r)\r\n      this.setState({\r\n        tableData: r.list,\r\n        tableLoading: false,\r\n        pagination: {\r\n          showTotal: (total, range) => { return `${total} items` },\r\n          showSizeChanger: true,\r\n          showQuickJumper: true,\r\n          current: r.pageNum,\r\n          pageSize: r.pageSize,\r\n          total: r.total,\r\n        }\r\n      })\r\n    })\r\n\r\n\r\n  }\r\n\r\n  // 分页/排序 事件处理\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n\r\n    const st = {\r\n      pagination: {\r\n        showTotal: (total, range) => { return `${total} items` },\r\n        showSizeChanger: true,\r\n        showQuickJumper: true,\r\n        current: pagination.current,\r\n        pageSize: pagination.pageSize,\r\n        total: this.state.pagination.total,\r\n      },\r\n    }\r\n    if (sorter.field && sorter.order) {\r\n      st.sorter = {\r\n        field: sorter.field,\r\n        order: sorter.order,\r\n      }\r\n    } else {\r\n      st.sorter = {\r\n        field: '',\r\n        order: '',\r\n      }\r\n    }\r\n    this.setState(st, this.queryList)\r\n\r\n  }\r\n\r\n  openStartProcessModal = (record) => {\r\n    this.setState({\r\n      procDefId: record.procDefId,\r\n      startProcessModalVisible: true\r\n    })\r\n  }\r\n\r\n  closeProcessModal = () => {\r\n    this.setState({ processDefinitionId: '', startProcessModalVisible: false })\r\n  }\r\n\r\n  startProcess = () => {\r\n\r\n\r\n    let processVar = {}\r\n\r\n    try {\r\n      processVar = JSON.parse(this.state.processVariable);\r\n\r\n    } catch (e) {\r\n      message.error(\"Json Parse Error !\")\r\n      return\r\n    }\r\n\r\n    ProcessApi.startProcessByDefId({\r\n      businessKey: this.state.businessKey,\r\n      processVariable: processVar,\r\n      procDefId: this.state.procDefId\r\n    }).then(r => {\r\n      message.success(\"Process Be Started Success\")\r\n      // this.queryList(false)\r\n      this.closeProcessModal()\r\n    })\r\n\r\n  }\r\n\r\n  vmodel = (name, v) => {\r\n    this.setState({ [name]: v });\r\n  }\r\n\r\n  deleteDeploy = (record) => {\r\n    ProcessApi.deleteDeploy(record.deploymentId).then(r => {\r\n      if(r.data === 'SUCCESS'){\r\n        message.success(\"Process Defined Be Deleted successfully\")\r\n        this.queryList(false)\r\n      }else{\r\n        message.error(\"Process Defined Deleted Failure\")\r\n      }\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    console.log(\"render...\")\r\n\r\n\r\n    const columns = [\r\n      {\r\n        title: \"Def ID\",\r\n        dataIndex: \"procDefId\",\r\n      },\r\n      {\r\n        title: \"Def Name\",\r\n        dataIndex: \"defName\",\r\n      },\r\n      {\r\n        title: \"Def Key\",\r\n        dataIndex: \"defKey\",\r\n      },\r\n      {\r\n        title: \"Def Ver.\",\r\n        dataIndex: \"defVersion\",\r\n      },\r\n      {\r\n        title: \"Deployment Id\",\r\n        dataIndex: \"deploymentId\",\r\n      },\r\n      {\r\n        title: \"Operate\",\r\n        key: \"operate\",\r\n        render: (text, record) => (\r\n          <div>\r\n            <Tooltip title=\"Detail\" placement=\"left\">\r\n              <a>\r\n                <InfoCircleOutlined />\r\n              </a>\r\n            </Tooltip>\r\n            <Divider type=\"vertical\" />\r\n            <Tooltip title=\"Start Process\"  placement=\"left\">\r\n              <a>\r\n                <CaretRightOutlined\r\n                  onClick={() => {\r\n                    this.openStartProcessModal(record);\r\n                  }}\r\n                />\r\n              </a>\r\n            </Tooltip>\r\n            <Divider type=\"vertical\" />          \r\n            <Popconfirm\r\n              placement=\"left\"\r\n              title=\"Are you sure to delete this process defined?\"\r\n              onConfirm={() => {\r\n                this.deleteDeploy(record);\r\n              }}\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n            >\r\n              <Tooltip title=\"Delete Process Defined\" placement=\"left\">\r\n                <a>\r\n                <DeleteOutlined />\r\n                </a>\r\n              </Tooltip>\r\n            </Popconfirm>\r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const operations = {\r\n      right: <Search\r\n        placeholder=\"key words\"\r\n        onSearch={this.onSearch}\r\n        style={{ width: 200 }}\r\n        size=\"small\"\r\n        enterButton\r\n      />\r\n    }\r\n\r\n\r\n\r\n    const props = {\r\n      name: 'file',\r\n      multiple: true,\r\n      action: '/api/deploy',\r\n      onChange : (info) => {\r\n        const { status } = info.file;\r\n        if (status !== 'uploading') {\r\n          console.log(info.file, info.fileList);\r\n        }\r\n        if (status === 'done') {\r\n          message.success(`${info.file.name} file uploaded successfully.`);\r\n          this.queryList(false);\r\n          \r\n        } else if (status === 'error') {\r\n          message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n      },\r\n    };\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Tabs type=\"card\" tabBarExtraContent={operations}>\r\n          <TabPane tab=\"Process Defined\" key=\"1\"></TabPane>\r\n        </Tabs>\r\n\r\n        {/* {JSON.stringify(this.state)} */}\r\n\r\n        <Table\r\n          onChange={this.handleTableChange}\r\n          columns={columns}\r\n          dataSource={this.state.tableData}\r\n          pagination={this.state.pagination}\r\n          size=\"small\"\r\n          rowKey={(record) => {\r\n            return record.procDefId;\r\n          }}\r\n        />\r\n\r\n\r\n\r\n        <Dragger {...props}>\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">Click or drag bpmn to this area to deploy a new process</p>\r\n          <p className=\"ant-upload-hint\">\r\n            Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n            band files\r\n          </p>\r\n        </Dragger>\r\n\r\n\r\n        <Modal\r\n          title=\"Start Process\"\r\n          visible={this.state.startProcessModalVisible}\r\n          onOk={this.startProcess}\r\n          onCancel={this.closeProcessModal}\r\n          width='80%'\r\n        >\r\n          <div style={{ marginTop: '8px' }}>\r\n            <Input placeholder=\"Business Key\" onChange={(e) => { this.vmodel('businessKey', e.target.value) }} />\r\n          </div>\r\n          <div style={{ marginTop: '8px' }}>\r\n            <TextArea rows={4} onChange={(e) => { this.vmodel('processVariable', e.target.value) }} placeholder=\"Process Variable (JSON) \" />\r\n\r\n            <div dangerouslySetInnerHTML={{ __html: `Eg.<br/>{<br/>\"users\":[\"zhangsan\",\"lisi\",\"wangwu\"],<br/>\"judge\":\"”zhaoliu\"<br/>}` }}></div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProcessDefinedList","D:\\devil13th\\github\\process-management-client\\src\\axios.js",[],"D:\\devil13th\\github\\process-management-client\\src\\components\\processvariable\\ProcessVariable.jsx",["101","102"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ProcessApi from \"@/api/ProcessApi\";\r\nimport {Divider,Alert,Input, InputNumber, Select, Radio, Row, Col, Button, message } from \"antd\";\r\nimport {EditOutlined } from \"@ant-design/icons\";\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nclass ProcessVariable extends React.Component {\r\n  state = {\r\n    executionVar: \"\",\r\n    executionLocalVar: \"\",\r\n    taskVar:\"\",\r\n    taskLocalVar:\"\",\r\n    tid: \"\",\r\n    idType: \"\",\r\n    processVarStr:\"{}\"\r\n  };\r\n\r\n  static propTypes = {\r\n    processVarType: PropTypes.string,\r\n    id: PropTypes.string,\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n    if (this.props.id) {\r\n      this.setState(\r\n        {\r\n          tid: this.props.id,\r\n          idType: this.props.processVarType,\r\n        },\r\n        this.search\r\n      );\r\n    }\r\n   \r\n  }\r\n\r\n  search = () => {\r\n    // alert(this.state.idType + \"|\" + v)\r\n\r\n    if(this.state.idType === 'execution'){\r\n        ProcessApi.queryProcessVarByExecutionId(this.state.tid).then((r) => {\r\n            console.log(r);\r\n            this.setState({\r\n                executionVar: JSON.stringify(r.data),\r\n            });\r\n        });\r\n\r\n        ProcessApi.queryProcessVarLocalByExecutionId(this.state.tid).then((r) => {\r\n            console.log(r);\r\n            this.setState({\r\n                executionLocalVar: JSON.stringify(r.data),\r\n            });\r\n        });\r\n    }else{\r\n        ProcessApi.queryProcessVarByTaskId(this.state.tid).then((r) => {\r\n            console.log(r);\r\n            this.setState({\r\n                taskVar: JSON.stringify(r.data),\r\n            });\r\n        });\r\n\r\n        ProcessApi.queryProcessVarLocalByTaskId(this.state.tid).then((r) => {\r\n            console.log(r);\r\n            this.setState({\r\n                taskLocalVar: JSON.stringify(r.data),\r\n            });\r\n        });\r\n\r\n    }\r\n  };\r\n\r\n  vmodel = (name, v) => {\r\n    this.setState({ [name]: v });\r\n  }\r\n\r\n\r\n  setVarGlobal = () => {\r\n    let processVar = {}\r\n    try{\r\n        processVar = JSON.parse(this.state.processVarStr);\r\n    }catch(e){\r\n        message.error(\" JSON parse err!\");\r\n        return\r\n    }\r\n\r\n    if(this.state.idType === \"execution\"){\r\n        ProcessApi.setProcessVarGlobalByExecutionId({\r\n            executionId:this.state.tid,\r\n            processVariable:processVar\r\n        }).then( r =>{\r\n            this.search();\r\n        })\r\n    }else{\r\n        ProcessApi.setProcessVarGlobalByTaskId({\r\n            executionId:this.state.tid,\r\n            processVariable:processVar\r\n        }).then( r =>{\r\n            this.search();\r\n        })\r\n    }\r\n\r\n\r\n  }\r\n  setVarLocal = () => {\r\n    let processVar = {}\r\n    try{\r\n        processVar = JSON.parse(this.state.processVarStr);\r\n    }catch(e){\r\n        message.error(\" JSON parse err!\");\r\n        return\r\n    }\r\n\r\n    if(this.state.idType === \"execution\"){\r\n        ProcessApi.setProcessVarLocalByExecutionId({\r\n            executionId:this.state.tid,\r\n            processVariable:processVar\r\n        }).then( r =>{\r\n            this.search();\r\n        })\r\n    }else{\r\n        ProcessApi.setProcessVarLocalByTaskId({\r\n            executionId:this.state.tid,\r\n            processVariable:processVar\r\n        }).then( r =>{\r\n            this.search();\r\n        })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ textAlign: \"right\" }}>\r\n          <Input.Group compact>\r\n            <Select\r\n              style={{ width: 130 }}\r\n              defaultValue=\"execution\"\r\n              value={this.state.idType}\r\n              onChange={(v) => {\r\n                this.setState({ idType: v });\r\n              }}\r\n            >\r\n              <Option value=\"execution\">Execution ID</Option>\r\n              <Option value=\"task\">Task ID</Option>\r\n            </Select>\r\n\r\n            <Input.Search\r\n              enterButton\r\n              style={{ width: 200 }}\r\n              onChange={(e) => {\r\n                this.setState({ tid: e.target.value });\r\n              }}\r\n              value={this.state.tid}\r\n              onSearch={this.search}\r\n            />\r\n          </Input.Group>\r\n        </div>\r\n        <Divider />\r\n        {/* {JSON.stringify(this.props)}|{JSON.stringify(this.state)} */}\r\n        <Row>\r\n          <Col\r\n            span={4}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n            <EditOutlined /> Set Process Variable:\r\n          </Col>\r\n          <Col span={10}>\r\n            <TextArea\r\n              value={this.state.processVarStr}\r\n              onChange={(e) => {\r\n                this.vmodel(\"processVarStr\", e.target.value);\r\n              }}\r\n            ></TextArea>\r\n\r\n            <div\r\n              dangerouslySetInnerHTML={{\r\n                __html: `Eg.<br/>{<br/>\"users\":[\"zhangsan\",\"lisi\",\"wangwu\"],<br/>\"judge\":\"”zhaoliu\"<br/>}`,\r\n              }}\r\n            ></div>\r\n          </Col>\r\n          <Col span={9} offset={1}>\r\n            <Button onClick={this.setVarGlobal}> Set Variable Global</Button>\r\n            <Divider type=\"vertical\" />\r\n            <Button onClick={this.setVarLocal}> Set Variable Local</Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Divider />\r\n        <Row>\r\n          <Col\r\n            span={10}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n             Execution Gloab Variable :\r\n          </Col>\r\n          <Col span={14}>\r\n            <Alert\r\n              message={this.state.executionVar ? this.state.executionVar : \"{}\"}\r\n              type=\"warning\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <Row>\r\n          <Col\r\n            span={10}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n             Execution Local Variable :\r\n          </Col>\r\n          <Col span={14}>\r\n            <Alert\r\n              message={\r\n                this.state.executionLocalVar\r\n                  ? this.state.executionLocalVar\r\n                  : \"{}\"\r\n              }\r\n              type=\"warning\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <Row>\r\n          <Col\r\n            span={10}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n             Task Gloab Variable :\r\n          </Col>\r\n          <Col span={14}>\r\n            <Alert\r\n              message={this.state.taskVar ? this.state.taskVar : \"{}\"}\r\n              type=\"info\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <Row>\r\n          <Col\r\n            span={10}\r\n            style={{ textAlign: \"right\", paddingRight: 8, paddingTop: 6 }}\r\n          >\r\n             Task Local Variable :\r\n          </Col>\r\n          <Col span={14}>\r\n            <Alert\r\n              message={this.state.taskLocalVar ? this.state.taskLocalVar : \"{}\"}\r\n              type=\"info\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProcessVariable;\r\n","D:\\devil13th\\github\\process-management-client\\src\\components\\processinstance\\TaskInfo.jsx",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":1,"column":8,"nodeType":"109","messageId":"110","endLine":1,"endColumn":12},{"ruleId":"107","severity":1,"message":"111","line":2,"column":25,"nodeType":"109","messageId":"110","endLine":2,"endColumn":30},{"ruleId":"107","severity":1,"message":"112","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":23},{"ruleId":"107","severity":1,"message":"113","line":3,"column":24,"nodeType":"109","messageId":"110","endLine":3,"endColumn":34},{"ruleId":"107","severity":1,"message":"114","line":5,"column":3,"nodeType":"109","messageId":"110","endLine":5,"endColumn":18},{"ruleId":"107","severity":1,"message":"115","line":6,"column":3,"nodeType":"109","messageId":"110","endLine":6,"endColumn":19},{"ruleId":"107","severity":1,"message":"116","line":8,"column":3,"nodeType":"109","messageId":"110","endLine":8,"endColumn":15},{"ruleId":"107","severity":1,"message":"117","line":9,"column":3,"nodeType":"109","messageId":"110","endLine":9,"endColumn":15},{"ruleId":"107","severity":1,"message":"118","line":11,"column":3,"nodeType":"109","messageId":"110","endLine":11,"endColumn":20},{"ruleId":"107","severity":1,"message":"119","line":21,"column":9,"nodeType":"109","messageId":"110","endLine":21,"endColumn":15},{"ruleId":"107","severity":1,"message":"120","line":22,"column":9,"nodeType":"109","messageId":"110","endLine":22,"endColumn":16},{"ruleId":"107","severity":1,"message":"121","line":2,"column":55,"nodeType":"109","messageId":"110","endLine":2,"endColumn":61},{"ruleId":"107","severity":1,"message":"122","line":4,"column":3,"nodeType":"109","messageId":"110","endLine":4,"endColumn":21},{"ruleId":"107","severity":1,"message":"123","line":81,"column":11,"nodeType":"109","messageId":"110","endLine":81,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":205,"column":15,"nodeType":"126","endLine":205,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":215,"column":15,"nodeType":"126","endLine":215,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":237,"column":15,"nodeType":"126","endLine":237,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":248,"column":15,"nodeType":"126","endLine":248,"endColumn":18},{"ruleId":"127","severity":1,"message":"128","line":4,"column":1,"nodeType":"129","endLine":144,"endColumn":2},{"ruleId":"107","severity":1,"message":"121","line":2,"column":60,"nodeType":"109","messageId":"110","endLine":2,"endColumn":66},{"ruleId":"107","severity":1,"message":"123","line":113,"column":11,"nodeType":"109","messageId":"110","endLine":113,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":300,"column":15,"nodeType":"126","endLine":300,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":306,"column":15,"nodeType":"126","endLine":306,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":312,"column":15,"nodeType":"126","endLine":312,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":318,"column":15,"nodeType":"126","endLine":318,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":324,"column":15,"nodeType":"126","endLine":324,"endColumn":18},{"ruleId":"107","severity":1,"message":"130","line":2,"column":37,"nodeType":"109","messageId":"110","endLine":2,"endColumn":44},{"ruleId":"107","severity":1,"message":"121","line":2,"column":46,"nodeType":"109","messageId":"110","endLine":2,"endColumn":52},{"ruleId":"107","severity":1,"message":"131","line":5,"column":9,"nodeType":"109","messageId":"110","endLine":5,"endColumn":27},{"ruleId":"107","severity":1,"message":"132","line":5,"column":28,"nodeType":"109","messageId":"110","endLine":5,"endColumn":46},{"ruleId":"107","severity":1,"message":"133","line":5,"column":66,"nodeType":"109","messageId":"110","endLine":5,"endColumn":81},{"ruleId":"107","severity":1,"message":"123","line":105,"column":11,"nodeType":"109","messageId":"110","endLine":105,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":225,"column":15,"nodeType":"126","endLine":225,"endColumn":19},{"ruleId":"107","severity":1,"message":"121","line":2,"column":74,"nodeType":"109","messageId":"110","endLine":2,"endColumn":80},{"ruleId":"107","severity":1,"message":"134","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":17},{"ruleId":"107","severity":1,"message":"131","line":7,"column":10,"nodeType":"109","messageId":"110","endLine":7,"endColumn":28},{"ruleId":"107","severity":1,"message":"133","line":7,"column":70,"nodeType":"109","messageId":"110","endLine":7,"endColumn":85},{"ruleId":"107","severity":1,"message":"123","line":89,"column":11,"nodeType":"109","messageId":"110","endLine":89,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":230,"column":15,"nodeType":"126","endLine":230,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":236,"column":15,"nodeType":"126","endLine":236,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":255,"column":17,"nodeType":"126","endLine":255,"endColumn":20},{"ruleId":"107","severity":1,"message":"135","line":4,"column":30,"nodeType":"109","messageId":"110","endLine":4,"endColumn":41},{"ruleId":"107","severity":1,"message":"136","line":4,"column":51,"nodeType":"109","messageId":"110","endLine":4,"endColumn":56},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'BrowserRouter' is defined but never used.","'Breadcrumb' is defined but never used.","'DesktopOutlined' is defined but never used.","'PieChartOutlined' is defined but never used.","'TeamOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'HighlightOutlined' is defined but never used.","'Header' is assigned a value but never used.","'SubMenu' is assigned a value but never used.","'Button' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'_this' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Divider' is defined but never used.","'UserSwitchOutlined' is defined but never used.","'CaretRightOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'PropTypes' is defined but never used.","'InputNumber' is defined but never used.","'Radio' is defined but never used.","no-global-assign","no-unsafe-negation"]